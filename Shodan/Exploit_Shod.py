import shodan
import os
import time
import API
import sys

reload(sys)
sys.setdefaultencoding("UTF-8")

# Lists the exploits based on the query
def show_exploits(exploits):
    i = 0
    print "#-----------[EXPLOITS]-----------#"
    for exploit in exploits['matches']:
        print "[{}] {}\n".format(i, exploit['description'])
        i += 1

# Lists info about the exploit
def get_exploit_info(expnumber, exploits):
    os.system('cls')
    exploit = exploits['matches'][expnumber]
    for key, value in exploit.iteritems():
        if key == 'code':
            pass
        else:
            print "[*] {} : {}".format(key, value)
    print "##########################################################\n"
    exit = raw_input("Exit? (Q): ")
    os.system('cls')

# Lists the code of the exploit
def get_exploit_code(expnumber, exploits):
    os.system('cls')
    print "##########################################################"
    exploit = exploits['matches'][expnumber]
    try:
        print "Code: {}".format(exploit['code'])
        print "##########################################################\n"
        exit = raw_input("Exit? (Q): ")
        os.system('cls')
    except Exception:
        print "This exploit has no code available\n\n"
        exit = raw_input("Exit? (Q): ")
        os.system('cls')


# Output the exploit to a file
# def exploit_to_file(expnumber, exploits):
#     exploit = exploits['matches'][expnumber]
#     filename = "exploitcode{}".format(expnumber)
#     print "[+] Writing the exploit code to file..."
#     try:
#         with open(filename, 'w') as outf:
#             outf.write("#-----------[CODE]-----------#\n\n")
#             outf.write(exploit['code'])
#             outf.close()
#     except Exception:
#         print Exception
#     time.sleep(2)
#     os.system('cls')


def Main_Exploits():
    print """\n\n
    ,------.,--.   ,--.,------. ,--.    ,-----. ,--.,--------.     ,---.  ,------.  ,---.  ,------.  ,-----.,--.  ,--.
    |  .---' \  `.'  / |  .--. '|  |   '  .-.  '|  |'--.  .--'    '   .-' |  .---' /  O  \ |  .--. ''  .--./|  '--'  |
    |  `--,   .'    \  |  '--' ||  |   |  | |  ||  |   |  |       `.  `-. |  `--, |  .-.  ||  '--'.'|  |    |  .--.  |
    |  `---. /  .'.  \ |  | --' |  '--.'  '-'  '|  |   |  |       .-'    ||  `---.|  | |  ||  |\  \ '  '--'\|  |  |  |
    `------''--'   '--'`--'     `-----' `-----' `--'   `--'       `-----' `------'`--' `--'`--' '--' `-----'`--'  `--'\n\n """
    query = raw_input('[+] Query you want to search for: ')
    print '[+] Searching for the query from Shodan ...\n\n'
    try:
        exploits = API.api.exploits.search(query) # Search for the query

        while True:
            if exploits['total'] == 0:
                os.system('cls')
                print "[!] Couldn't have found exploits for your query !"
                break
            else:
                show_exploits(exploits) # Show exploits based on query
                print '\n'
                print "[#]-------------[INFO]------------[#]\n"
                print "   [C]ode for the Qexploit."
                print "   [I]nfo about exploit."
                print "   [Q]uit."
                print "\n[#]-------------------------------[#]\n"
                print """# Syntax ex: 4(exploit number) C(exploit code)
                            4(exploit number) I(exploit info)"""


                choice = raw_input("($)> ") # Store the choice of user
                choice = choice.split(' ') # Splits the choice

                excode = ''
                exinfo = ''
                exnum = ''
                outfile = ''
                exit = ''
                print exit

                # Get the arguments nedded for functions
                for c in choice:
                    if c == 'C':
                        excode = c # exploitcode argument
                    if c == 'I':
                        exinfo = c # exploitinfo argument
                    if c.isdigit():
                        exnum = int(c) # number of the exploit argument
                    if c == 'O':
                        outfile = c # outputting to file argument
                    if c == 'Q': # exit argument
                        exit = c

                # Checking the arguments
                if exit: # Check for -Q argument
                    os.system('cls')
                    break
                elif excode and outfile: # Check for -C and -O arguments
                    exploit_to_file(exnum, exploits)
                elif exinfo and outfile: # Check for -I and -O arguments
                    exploit_to_file(exnum, exploits)

                elif excode: # check for -C argument
                    get_exploit_code(exnum, exploits)
                elif exinfo: # check for -I argument
                    get_exploit_info(exnum, exploits)
    except Exception:
        print "[!] Exploits for your query couldn't be found !"
